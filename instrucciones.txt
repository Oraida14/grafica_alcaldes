https://oraida14.github.io/grafica_alcaldes/

python -m http.server 8000

python grafica.py


üìù INSTRUCCIONES DE USO DE GIT ‚Äì PROYECTO GRAFICA_ALCALDES
1Ô∏è‚É£ Abrir Git Bash y moverse al proyecto
# Navega a la carpeta donde est√° tu proyecto
cd "/c/Users/mafierro/3D Objects/grafica_alcaldes"

2Ô∏è‚É£ Verificar estado del repositorio
git status


üîπ Esto te mostrar√°:

Archivos modificados

Archivos no rastreados

Rama actual y si est√° al d√≠a con GitHub

3Ô∏è‚É£ Agregar archivos al √°rea de staging

Agregar todos los cambios:

git add .


Agregar archivos espec√≠ficos:

git add reporte_tanque.json
git add templates/mapa.html


üí° Tip: Siempre revisa con git status antes de agregar.

4Ô∏è‚É£ Hacer commit con mensaje descriptivo
git commit -m "Actualizaci√≥n: registro de datos y reporte diario tanque_alcaldes"


‚úÖ Ejemplos de mensajes claros:

"Actualizaci√≥n del CSV tanque_alcaldes_historial_30dias.csv"

"Correcci√≥n en grafica.py para an√°lisis de volumen y tirante"

5Ô∏è‚É£ Subir cambios a GitHub
git push origin master


‚ö†Ô∏è Nota: Si tu repositorio principal es main, reemplaza master por main.

6Ô∏è‚É£ Traer cambios desde GitHub antes de empezar a trabajar
git pull origin master


üí° √ötil si otros tambi√©n trabajan en el repo.

7Ô∏è‚É£ Ver historial de commits
git log --oneline


üîπ Ver√°s una lista resumida de commits recientes con su ID y mensaje.

8Ô∏è‚É£ Ver diferencias antes de hacer commit
git diff


üîπ Muestra los cambios l√≠nea por l√≠nea.

9Ô∏è‚É£ Restaurar un archivo al √∫ltimo estado confirmado
git restore nombre_archivo


üí° Esto deshace cambios locales que no quieres subir.

üîü Buenas pr√°cticas

Hacer commits frecuentes y descriptivos.

Mantener actualizado el CSV y JSON (tanque_alcaldes_historial_30dias.csv y reporte_tanque.json).

Para nuevas funcionalidades, crea ramas:

git checkout -b nombre_rama


Antes de subir, revisa siempre git status y git diff.









//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# Instrucciones detalladas para trabajar con Git en el proyecto grafica_alcaldes

## 1. Abrir Git Bash y navegar a tu proyecto
cd "/c/Users/mafierro/3D Objects/grafica_alcaldes"

## 2. Ver el estado actual del repositorio
git status
# Te mostrar√° los archivos modificados, no rastreados y la rama actual

## 3. Agregar archivos al √°rea de staging
# Para agregar TODOS los cambios (modificados y nuevos)
git add .

# Si quieres agregar solo un archivo espec√≠fico
git add reporte_tanque.json
git add templates/mapa.html

## 4. Hacer commit con mensaje descriptivo
git commit -m "Actualizaci√≥n: registro de datos y reporte diario tanque_alcaldes"

# Ejemplos de commits:
# "Actualizaci√≥n de tanque_alcaldes_historial_30dias.csv con √∫ltimos datos"
# "Correcci√≥n en grafica.py para an√°lisis de volumen y tirante"

## 5. Subir los cambios a GitHub
git push origin master

# Nota: Si es la primera vez o si cambias de rama principal, reemplaza 'master' por 'main' si tu repositorio tiene main.

## 6. Traer cambios desde GitHub antes de empezar a trabajar (opcional, si hay colaboradores)
git pull origin master

## 7. Ver historial de commits
git log --oneline
# Te muestra una lista resumida de commits recientes

## 8. Ver diferencias antes de hacer commit
git diff
# Muestra los cambios l√≠nea por l√≠nea

## 9. Restaurar un archivo al √∫ltimo estado confirmado (deshacer cambios locales)
git restore nombre_archivo

## 10. Recomendaciones
- Siempre hacer `git status` antes de commit para revisar cambios.
- Hacer commits frecuentes y descriptivos.
- Mantener actualizado el CSV `tanque_alcaldes_historial_30dias.csv` y el JSON `reporte_tanque.json`.
- Para nuevas funcionalidades, puedes crear ramas:
  git checkout -b nombre_rama


/////////////////////////////////////////////////////////////////////////////////////////////
# üìå PASOS B√ÅSICOS PARA USAR GIT Y GITHUB

1. Abre Git Bash en la carpeta de tu proyecto:
   - Clic derecho en la carpeta ‚Üí "Git Bash Here"

2. Configura tu usuario (solo la primera vez en tu compu):
   git config --global user.name "TuNombre"
   git config --global user.email "tuemail@example.com"

3. Inicializa el repositorio (solo la primera vez en ese proyecto):
   git init

4. Conecta tu proyecto a GitHub (solo la primera vez):
   git remote add origin https://github.com/USUARIO/REPO.git

5. Revisa el estado de tus archivos:
   git status

6. Agrega los cambios que quieras guardar:
   git add .

7. Crea un commit (guarda un punto en la historia):
   git commit -m "Descripci√≥n de los cambios"

8. Sube los cambios a GitHub:
   git push origin main
   (si tu rama se llama master ‚Üí usa `master` en lugar de `main`)

# üöÄ PASOS CUANDO YA TIENES EL REPO INICIADO

1. Abre Git Bash en la carpeta del proyecto
2. Verifica si hay cambios nuevos en GitHub antes de trabajar:
   git pull origin main

3. Haz tus modificaciones en el c√≥digo
4. Guarda los cambios con:
   git add .
   git commit -m "mensaje"
   git push origin main

# üõ†Ô∏è COMANDOS √öTILES

- Ver el historial de commits:
  git log --oneline

- Cambiar a otra rama:
  git checkout nombre_rama

- Crear nueva rama:
  git checkout -b nombre_rama

- Volver al estado del √∫ltimo commit (descartar cambios):
  git checkout -- archivo

- Clonar un repositorio existente:
  git clone https://github.com/USUARIO/REPO.git
