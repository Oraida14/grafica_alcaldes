https://oraida14.github.io/grafica_alcaldes/

python -m http.server 8000

python grafica.py


///////////////////////////////////////////

 git add .

 git commit -m " reporte_tanque.json "   
                                                                                                
 git push origin master                                                                                                          
///////////////////////////////////////////////////////////////////////////////


üìù INSTRUCCIONES DE USO DE GIT ‚Äì PROYECTO GRAFICA_ALCALDES
1Ô∏è‚É£ Abrir Git Bash y moverse al proyecto
# Navega a la carpeta donde est√° tu proyecto
cd "/c/Users/mafierro/3D Objects/grafica_alcaldes"

2Ô∏è‚É£ Verificar estado del repositorio
git status


üîπ Esto te mostrar√°:

Archivos modificados

Archivos no rastreados

Rama actual y si est√° al d√≠a con GitHub

3Ô∏è‚É£ Agregar archivos al √°rea de staging

Agregar todos los cambios:

git add .


Agregar archivos espec√≠ficos:

git add reporte_tanque.json
git add templates/mapa.html


üí° Tip: Siempre revisa con git status antes de agregar.

4Ô∏è‚É£ Hacer commit con mensaje descriptivo
git commit -m "Actualizaci√≥n: registro de datos y reporte diario tanque_alcaldes"


‚úÖ Ejemplos de mensajes claros:

"Actualizaci√≥n del CSV tanque_alcaldes_historial_30dias.csv"

"Correcci√≥n en grafica.py para an√°lisis de volumen y tirante"

5Ô∏è‚É£ Subir cambios a GitHub
git push origin master


‚ö†Ô∏è Nota: Si tu repositorio principal es main, reemplaza master por main.

6Ô∏è‚É£ Traer cambios desde GitHub antes de empezar a trabajar
git pull origin master


üí° √ötil si otros tambi√©n trabajan en el repo.

7Ô∏è‚É£ Ver historial de commits
git log --oneline


üîπ Ver√°s una lista resumida de commits recientes con su ID y mensaje.

8Ô∏è‚É£ Ver diferencias antes de hacer commit
git diff


üîπ Muestra los cambios l√≠nea por l√≠nea.

9Ô∏è‚É£ Restaurar un archivo al √∫ltimo estado confirmado
git restore nombre_archivo


üí° Esto deshace cambios locales que no quieres subir.

üîü Buenas pr√°cticas

Hacer commits frecuentes y descriptivos.

Mantener actualizado el CSV y JSON (tanque_alcaldes_historial_30dias.csv y reporte_tanque.json).

Para nuevas funcionalidades, crea ramas:

git checkout -b nombre_rama


Antes de subir, revisa siempre git status y git diff.









//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# Instrucciones detalladas para trabajar con Git en el proyecto grafica_alcaldes

## 1. Abrir Git Bash y navegar a tu proyecto
cd "/c/Users/mafierro/3D Objects/grafica_alcaldes"

## 2. Ver el estado actual del repositorio
git status
# Te mostrar√° los archivos modificados, no rastreados y la rama actual

## 3. Agregar archivos al √°rea de staging
# Para agregar TODOS los cambios (modificados y nuevos)
git add .

# Si quieres agregar solo un archivo espec√≠fico
git add reporte_tanque.json
git add templates/mapa.html

## 4. Hacer commit con mensaje descriptivo
git commit -m "Actualizaci√≥n: registro de datos y reporte diario tanque_alcaldes"

# Ejemplos de commits:
# "Actualizaci√≥n de tanque_alcaldes_historial_30dias.csv con √∫ltimos datos"
# "Correcci√≥n en grafica.py para an√°lisis de volumen y tirante"

## 5. Subir los cambios a GitHub
git push origin master

# Nota: Si es la primera vez o si cambias de rama principal, reemplaza 'master' por 'main' si tu repositorio tiene main.

## 6. Traer cambios desde GitHub antes de empezar a trabajar (opcional, si hay colaboradores)
git pull origin master

## 7. Ver historial de commits
git log --oneline
# Te muestra una lista resumida de commits recientes

## 8. Ver diferencias antes de hacer commit
git diff
# Muestra los cambios l√≠nea por l√≠nea

## 9. Restaurar un archivo al √∫ltimo estado confirmado (deshacer cambios locales)
git restore nombre_archivo

## 10. Recomendaciones
- Siempre hacer `git status` antes de commit para revisar cambios.
- Hacer commits frecuentes y descriptivos.
- Mantener actualizado el CSV `tanque_alcaldes_historial_30dias.csv` y el JSON `reporte_tanque.json`.
- Para nuevas funcionalidades, puedes crear ramas:
  git checkout -b nombre_rama


/////////////////////////////////////////////////////////////////////////////////////////////
# üìå PASOS B√ÅSICOS PARA USAR GIT Y GITHUB

1. Abre Git Bash en la carpeta de tu proyecto:
   - Clic derecho en la carpeta ‚Üí "Git Bash Here"

2. Configura tu usuario (solo la primera vez en tu compu):
   git config --global user.name "TuNombre"
   git config --global user.email "tuemail@example.com"

3. Inicializa el repositorio (solo la primera vez en ese proyecto):
   git init

4. Conecta tu proyecto a GitHub (solo la primera vez):
   git remote add origin https://github.com/USUARIO/REPO.git

5. Revisa el estado de tus archivos:
   git status

6. Agrega los cambios que quieras guardar:
   git add .

7. Crea un commit (guarda un punto en la historia):
   git commit -m "Descripci√≥n de los cambios"

8. Sube los cambios a GitHub:
   git push origin main
   (si tu rama se llama master ‚Üí usa `master` en lugar de `main`)

# üöÄ PASOS CUANDO YA TIENES EL REPO INICIADO

1. Abre Git Bash en la carpeta del proyecto
2. Verifica si hay cambios nuevos en GitHub antes de trabajar:
   git pull origin main

3. Haz tus modificaciones en el c√≥digo
4. Guarda los cambios con:
   git add .
   git commit -m "mensaje"
   git push origin main

# üõ†Ô∏è COMANDOS √öTILES

- Ver el historial de commits:
  git log --oneline

- Cambiar a otra rama:
  git checkout nombre_rama

- Crear nueva rama:
  git checkout -b nombre_rama

- Volver al estado del √∫ltimo commit (descartar cambios):
  git checkout -- archivo

- Clonar un repositorio existente:
  git clone https://github.com/USUARIO/REPO.git
//////////respaldo  grafica.py 12/09/2025 
from flask import Flask, render_template, jsonify, send_from_directory
from flask_socketio import SocketIO
import pandas as pd
from sqlalchemy import create_engine
import os
import logging
import threading
import time
import git
import json
from datetime import datetime, timedelta

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Ruta local de tu repositorio
REPO_PATH = "C:/Users/mafierro/3D Objects/grafica_alcaldes"
CSV_PATH = os.path.join(REPO_PATH, "static", "tanque_alcaldes.csv")
REPORTE_PATH = os.path.join(REPO_PATH, "reporte_tanque.json")

def build_query():
    # Obtener datos de las √∫ltimas 24 horas
    fecha_fin = datetime.now()
    fecha_inicio = fecha_fin - timedelta(days=1)
    query = f"""
        SELECT Nivel_1, t_stamp
        FROM datos.tanque_alcaldes
        WHERE t_stamp >= '{fecha_inicio}' AND t_stamp <= '{fecha_fin}'
        ORDER BY t_stamp ASC;
    """
    return query

def push_to_github(repo_path, file_path):
    try:
        repo = git.Repo(repo_path)
        repo.git.add(file_path)
        commit_message = f"Update {os.path.basename(file_path)} {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        repo.index.commit(commit_message)
        origin = repo.remote(name='origin')
        push_info = origin.push()
        if push_info[0].flags & push_info[0].ERROR:
            logging.error(f"Error al subir a GitHub: {push_info[0].summary}")
        else:
            logging.info(f"{file_path} subido a GitHub exitosamente ‚úÖ")
    except git.exc.GitCommandError as e:
        logging.error(f"Error al subir a GitHub: {e}")
        logging.error("Aseg√∫rate de que no haya conflictos y de que tengas permisos para hacer push.")
    except Exception as e:
        logging.error(f"Error inesperado al subir a GitHub: {e}")

def analizar_comportamiento(df):
    NIVEL_MAX = 3.0  # metros
    CAPACIDAD = 5000  # m¬≥
    AREA_BASE_TANQUE = 1720.82  # m¬≤
    CAPACIDAD_PIPA = 7.57  # m¬≥ (7,570 litros)

    df['t_stamp'] = pd.to_datetime(df['t_stamp'])

    # Filtrar solo desde el primer d√≠a del mes actual
    now = datetime.now()
    fecha_inicio = pd.Timestamp(year=now.year, month=now.month, day=1)
    df = df[df['t_stamp'] >= fecha_inicio]

    # Filtrar registros con Nivel_1 = 0 (falsos negativos)
    df = df[df['Nivel_1'] > 0]

    # Agregar columna de hora
    df['hora'] = df['t_stamp'].dt.hour

    # Separar en d√≠a y noche
    dia = df[(df['hora'] >= 6) & (df['hora'] < 16)]
    noche = df[(df['hora'] >= 16) | (df['hora'] < 6)]

    def calcular_metricas(subset, es_noche=False):
        if subset.empty:
            return {}

        tirante_inicio = subset.iloc[0]['Nivel_1']
        tirante_fin = subset.iloc[-1]['Nivel_1']
        volumen_inicio = (tirante_inicio / NIVEL_MAX) * CAPACIDAD
        volumen_fin = (tirante_fin / NIVEL_MAX) * CAPACIDAD
        volumen_rebombeado = max(volumen_fin - volumen_inicio, 0)

        # Estimaci√≥n de horas de operaci√≥n
        delta_t = subset['t_stamp'].diff().median().seconds / 3600 if len(subset) > 1 else 1
        horas_operacion = ((subset['Nivel_1'].diff() > 0).sum()) * delta_t
        gasto_promedio = (volumen_rebombeado * 1000) / (horas_operacion * 3600) if horas_operacion > 0 else 0

        # An√°lisis de seguridad
        alertas = []
        if es_noche:
            # Calcular la tendencia previa
            subset['tendencia'] = subset['Nivel_1'].diff().rolling(window=3).mean()

            # Ajustar el umbral para detectar cambios significativos
            UMBRAL_CAMBIO_SIGNIFICATIVO = -0.05  # Cambio m√≠nimo de 5 cm en el nivel
            cambios_significativos = subset[(subset['Nivel_1'].diff() < UMBRAL_CAMBIO_SIGNIFICATIVO) & (subset['tendencia'] >= 0)]

            if not cambios_significativos.empty:
                volumen_extraido_total = abs((cambios_significativos['Nivel_1'].diff()).sum() * AREA_BASE_TANQUE)
                VOLUMEN_MINIMO_ALERTA = 1.0  # 1 m¬≥ como m√≠nimo para generar alerta
                if volumen_extraido_total > VOLUMEN_MINIMO_ALERTA:
                    alertas.append(f"Descargas nocturnas no autorizadas: {len(cambios_significativos)} eventos")
                    alertas.append(f"Volumen total extra√≠do: {volumen_extraido_total:.2f} m¬≥ ({volumen_extraido_total * 1000:.0f} litros)")
                    num_pipas_equivalente = volumen_extraido_total / CAPACIDAD_PIPA
                    alertas.append(f"Equivalente a {num_pipas_equivalente:.1f} pipas")

        return {
            "tirante_inicio": round(tirante_inicio, 2),
            "tirante_fin": round(tirante_fin, 2),
            "volumen_inicio": round(volumen_inicio, 0),
            "volumen_fin": round(volumen_fin, 0),
            "volumen_rebombeado": round(volumen_rebombeado, 0),
            "horas_operacion": round(horas_operacion, 1),
            "gasto_lps": round(gasto_promedio, 1),
            "alertas": alertas
        }

    return {
        "dia": calcular_metricas(dia),
        "noche": calcular_metricas(noche, es_noche=True)
    }

def extract_and_update_data():
    db_connection = None
    while True:  # Bucle infinito para ejecutar peri√≥dicamente
        try:
            logging.info("Conectando a la base de datos...")
            db_connection_str = 'mysql+pymysql://admin:Password0@192.168.103.2/datos'
            db_connection = create_engine(db_connection_str)
            logging.info("Conexi√≥n a la base de datos exitosa.")
            logging.info("Extrayendo datos hist√≥ricos para tanque_alcaldes...")
            query = build_query()
            df = pd.read_sql(query, con=db_connection)
            if df.empty:
                logging.warning("No se encontraron datos para tanque_alcaldes.")
            else:
                df['nombre_sitio'] = 'tanque_alcaldes'
                df['t_stamp'] = pd.to_datetime(df['t_stamp'])
                df['fecha_hora'] = df['t_stamp'].dt.strftime('%Y-%m-%d %H:%M:%S')
                # Guardar CSV en la carpeta static
                df.to_csv(CSV_PATH, index=False, encoding='utf-8-sig')
                logging.info(f"Historial guardado en {CSV_PATH}")
                # Analizar comportamiento
                reporte = analizar_comportamiento(df)
                with open(REPORTE_PATH, "w", encoding="utf-8") as f:
                    json.dump(reporte, f, indent=4, ensure_ascii=False)
                logging.info(f"Reporte guardado en {REPORTE_PATH}")
                # Subir ambos archivos a GitHub
                push_to_github(REPO_PATH, CSV_PATH)
                push_to_github(REPO_PATH, REPORTE_PATH)
                # Emitir datos y reporte al frontend
                last_data = df.drop_duplicates(subset=['nombre_sitio'], keep='last').tail(1)
                socketio.emit('update_data', {
                    "ultimos_datos": last_data.to_dict(orient='records'),
                    "reporte": reporte
                })
                logging.info(f"√öltimo dato extra√≠do: {last_data.iloc[0]}")
        except Exception as e:
            logging.error(f"Ocurri√≥ un error: {e}")
        finally:
            if db_connection:
                db_connection.dispose()
                logging.info("Conexi√≥n a la base de datos cerrada.")
        time.sleep(300)  # Esperar 5 minutos antes de la siguiente ejecuci√≥n

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/seguridad')
def seguridad():
    return render_template('seguridad.html')

@app.route('/reporte')
def reporte():
    return render_template('reporte.html')

@app.route('/detalle-alertas')
def detalle_alertas():
    return render_template('detalle_alertas.html')

if __name__ == "__main__":
    threading.Thread(target=extract_and_update_data, args=(), daemon=True).start()
    socketio.run(app, debug=True)

    ////////////////////////////////////////////////////////////////////////

    <!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Dashboard Tanque Alcaldes</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.0/papaparse.min.js"></script>
  <style>
    body {
      background-color: #121212;
      color: #e0e0e0;
      font-family: 'Segoe UI', sans-serif;
      padding: 20px;
    }
    .card {
      width: 100%;
      background: linear-gradient(145deg, #2c3e50, #34495e);
      border-radius: 15px;
      margin-bottom: 20px;
      padding: 20px;
      box-shadow: 0 4px 15px rgba(5, 203, 218, 0.815);
      transition: transform 0.3s, box-shadow 0.3s;
      box-sizing: border-box;
    }
    .metric-value {
      color: #3498db;
      font-weight: bold;
      font-size: 1.2em;
    }
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 20px rgba(11, 220, 235, 0.5);
    }
    .chart-container {
      width: 100%;
      height: 400px;
      border-radius: 10px;
      background: rgba(255, 255, 255, 0.05);
      padding: 10px;
      margin-bottom: 20px;
      box-sizing: border-box;
    }
    .chart-container canvas {
      width: 100% !important;
      height: 100% !important;
    }
    .analysis-description {
      background-color: rgba(224, 213, 213, 0.1);
      color: #e0e0e0;
      padding: 15px;
      border-radius: 10px;
      border-left: 4px solid #3498db;
    }
    h1, h4, h5 {
      color: #ecf0f1;
    }
    .metrics-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      margin-bottom: 20px;
    }
    .metric-card {
      flex: 1;
      min-width: 200px;
      margin: 10px;
    }
    .navbar {
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
<!-- üîπ Navbar corregido -->
<!-- üîπ Navbar corregido -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="index.html">Tanque Alcaldes</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
      aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" href="index.html">An√°lisis General</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="reporte.html">Reporte</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="seguridad.html">Seguridad</a>
        </li>
        
        <li class="nav-item">
          <a class="nav-link" href="https://oraida14.github.io/grafica_alcaldes/detalle_alertas.html">Detalle Alertas</a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<script>
  // üîπ Resaltar pesta√±a activa seg√∫n la URL
  const currentPage = window.location.pathname.split("/").pop(); // obtiene index.html, reporte.html, etc.
  const navLinks = document.querySelectorAll('.navbar-nav .nav-link');

  navLinks.forEach(link => {
    if (link.getAttribute('href') === currentPage) {
      link.classList.add('active');
    } else {
      link.classList.remove('active');
    }
  });
</script>




  <h1 class="text-center mb-4">An√°lisis - Tanque Alcaldes</h1>
  <div class="metrics-container">
  <div class="metric-card">
    <div class="card">
      <h5>Promedio</h5>
      <p id="promedio" class="metric-value">--</p>
    </div>
  </div>
  <div class="metric-card">
    <div class="card">
      <h5>Mediana</h5>
      <p id="mediana" class="metric-value">--</p>
    </div>
  </div>
  <div class="metric-card">
    <div class="card">
      <h5>Desviaci√≥n Est√°ndar</h5>
      <p id="desviacion" class="metric-value">--</p>
    </div>
  </div>
  <div class="metric-card">
    <div class="card">
      <h5>Nivel M√°ximo</h5>
      <p id="nivelMaximo" class="metric-value">--</p>
    </div>
  </div>
  <div class="metric-card">
    <div class="card">
      <h5>Nivel M√≠nimo</h5>
      <p id="nivelMinimo" class="metric-value">--</p>
    </div>
  </div>
  <div class="metric-card">
    <div class="card">
      <h5>Tendencia</h5>
      <p id="tendencia" class="metric-value">--</p>
    </div>
  </div>
</div>

  <div class="card">
    <h4 class="text-center">Hist√≥rico Nivel del Tanque (30 d√≠as)</h4>
    <div class="chart-container">
      <canvas id="nivelChart"></canvas>
    </div>
  </div>
  <div class="card">
    <h4 class="text-center">An√°lisis Diario y Nocturno</h4>
    <div class="analysis-description" id="descripcion">
      <p>El gr√°fico muestra la evoluci√≥n del nivel del tanque Alcaldes. Las m√©tricas resumen el comportamiento de los √∫ltimos 30 d√≠as.</p>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    async function fetchData() {
      // Tu c√≥digo JavaScript existente
      // Cargar datos desde los archivos en GitHub
      const csvUrl = 'https://raw.githubusercontent.com/Oraida14/grafica_alcaldes/master/static/tanque_alcaldes.csv';
      const reporteUrl = 'https://raw.githubusercontent.com/Oraida14/grafica_alcaldes/master/reporte_tanque.json';

      // Cargar datos CSV
      const response = await fetch(csvUrl);
      const csvText = await response.text();
      const results = Papa.parse(csvText, {
          header: true,
          dynamicTyping: true,
      });
      const data = results.data;

      // Filtrar los datos para ignorar los ceros que duran menos de una hora
      let filteredData = [];
      let zeroStartTime = null;
      for (let i = 0; i < data.length; i++) {
          if (data[i].Nivel_1 === 0) {
              if (zeroStartTime === null) {
                  zeroStartTime = new Date(data[i].fecha_hora);
              }
              // Si es el √∫ltimo dato, a√±adirlo si no supera una hora
              if (i === data.length - 1 && zeroStartTime !== null) {
                  let zeroEndTime = new Date(data[i].fecha_hora);
                  let zeroDuration = (zeroEndTime - zeroStartTime) / (1000 * 60); // Duraci√≥n en minutos
                  if (zeroDuration <= 1) { // Si dura 1 minuto o menos, ignorar
                      continue;
                  }
              }
          } else {
              if (zeroStartTime !== null) {
                  let zeroEndTime = new Date(data[i - 1].fecha_hora);
                  let zeroDuration = (zeroEndTime - zeroStartTime) / (1000 * 60); // Duraci√≥n en minutos
                  if (zeroDuration <= 60) { // Si dura 1 hora o menos, ignorar los ceros
                      zeroStartTime = null;
                      continue;
                  }
                  zeroStartTime = null;
              }
              filteredData.push(data[i]);
          }
      }

      // Cargar reporte JSON
      const reporteResponse = await fetch(reporteUrl);
      const reporte = await reporteResponse.json();

      // Calcular estad√≠sticas con los datos filtrados
      const niveles = filteredData.map(d => d.Nivel_1);
      const fechas = filteredData.map(d => d.fecha_hora);
      const promedio = niveles.reduce((a, b) => a + b, 0) / niveles.length;
      const sorted = [...niveles].sort((a, b) => a - b);
      const mediana = sorted.length % 2 ? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;
      const desviacion = Math.sqrt(niveles.reduce((sq, n) => sq + Math.pow(n - promedio, 2), 0) / niveles.length);
      const nivelMaximo = Math.max(...niveles);
      const nivelMinimo = Math.min(...niveles);
      const tendencia = niveles[niveles.length - 1] > niveles[0] ? "Aumentando" : "Disminuyendo";

      // Mostrar m√©tricas
      document.getElementById('promedio').textContent = promedio.toFixed(2);
      document.getElementById('mediana').textContent = mediana.toFixed(2);
      document.getElementById('desviacion').textContent = desviacion.toFixed(2);
      document.getElementById('nivelMaximo').textContent = nivelMaximo.toFixed(2);
      document.getElementById('nivelMinimo').textContent = nivelMinimo.toFixed(2);
      document.getElementById('tendencia').textContent = tendencia;

      // Crear gr√°fico
      const ctx = document.getElementById('nivelChart').getContext('2d');
      // Aseg√∫rate de que el contenedor del canvas tenga el tama√±o correcto
      document.getElementById('nivelChart').style.width = '100%';
      document.getElementById('nivelChart').style.height = '100%';

      new Chart(ctx, {
          type: 'line',
          data: {
              labels: fechas,
              datasets: [{
                  label: 'Nivel (m)',
                  data: niveles,
                  borderColor: 'rgba(52, 152, 219, 1)',
                  backgroundColor: 'rgba(52, 152, 219, 0.1)',
                  borderWidth: 3,
                  fill: true,
                  tension: 0.3,
                  pointRadius: 0,
                  pointHoverRadius: 0,
              }]
          },
          options: {
              responsive: true,
              maintainAspectRatio: false,
              interaction: {
                  mode: 'nearest',
                  axis: 'x',
                  intersect: false
              },
              plugins: {
                  tooltip: {
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      titleColor: '#ecf0f1',
                      bodyColor: '#ecf0f1',
                      padding: 10,
                      displayColors: false,
                  },
                  title: {
                      display: true,
                      text: 'Nivel del Tanque Alcaldes - √öltimos 30 d√≠as',
                      color: '#ecf0f1',
                      font: {
                          size: 16
                      }
                  }
              },
              scales: {
                  x: {
                      display: true,
                      title: {
                          display: true,
                          text: 'Fecha/Hora',
                          color: '#ecf0f1'
                      },
                      ticks: {
                          color: '#bdc3c7'
                      }
                  },
                  y: {
                      display: true,
                      title: {
                          display: true,
                          text: 'Nivel (m)',
                          color: '#ecf0f1'
                      },
                      ticks: {
                          color: '#bdc3c7',
                          beginAtZero: false
                      }
                  }
              }
          }
      });

      // Descripci√≥n din√°mica basada en el reporte
      const dia = reporte.dia;
      const noche = reporte.noche;
      document.getElementById('descripcion').innerHTML = `
          <p>Durante el d√≠a, el nivel inici√≥ en <strong>${dia.tirante_inicio} m</strong> y termin√≥ en <strong>${dia.tirante_fin} m</strong>,
          con un volumen rebombeado de <strong>${dia.volumen_rebombeado} m¬≥</strong> y un gasto promedio de <strong>${dia.gasto_lps} L/s</strong>.</p>
          <p>Durante la noche, el nivel inici√≥ en <strong>${noche.tirante_inicio} m</strong> y termin√≥ en <strong>${noche.tirante_fin} m</strong>,
          con un volumen rebombeado de <strong>${noche.volumen_rebombeado} m¬≥</strong> y un gasto promedio de <strong>${noche.gasto_lps} L/s</strong>.</p>
      `;
    }

    fetchData();
  </script>
</body>
</html>